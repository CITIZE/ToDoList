{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  toDos: new Map()\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"loadToDos\":\n      const dataMap = new Map(state.toDos);\n      for (const item of action.payload) {\n        const date = item.dateComplete;\n        if (dataMap.has(date)) {\n          const existingToDos = dataMap.get(date);\n          dataMap.set(date, [...existingToDos, item]);\n        } else {\n          dataMap.set(date, [item]);\n        }\n      }\n      return {\n        ...state,\n        toDos: dataMap\n      };\n    case \"addToDo\":\n      {\n        const date = action.payload.dateComplete;\n        const dataMap = new Map(state.toDos);\n        if (dataMap.has(date)) {\n          const existingToDos = dataMap.get(date);\n          dataMap.set(date, [...existingToDos, action.payload]);\n        } else {\n          dataMap.set(date, [action.payload]);\n        }\n        return {\n          ...state,\n          toDos: dataMap\n        };\n      }\n      ;\n    case \"deleteToDo\":\n      {\n        const dataMap = new Map(state.toDos);\n        const tasks = dataMap.get(action.payload);\n        return {\n          ...state,\n          toDos: dataMap\n        };\n      }\n      ;\n    default:\n      return state;\n  }\n};\nexport const store = configureStore({\n  reducer: reducer\n});","map":{"version":3,"names":["configureStore","initialState","toDos","Map","reducer","state","action","type","dataMap","item","payload","date","dateComplete","has","existingToDos","get","set","tasks","store"],"sources":["C:/Users/79803/Desktop/todo fullstack 2/client/src/app/store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nexport type ToDoId = number;\r\nexport type ToDoTitle = string;\r\nexport type ToDoDescription = string;\r\nexport type ToDoDateComplete = number;\r\n\r\nexport type ToDo = {\r\n\tid: ToDoId,\r\n\tdateComplete: ToDoDateComplete,\r\n\ttitle: ToDoTitle,\r\n\tdescription: ToDoDescription,\r\n\tisDone: boolean,\r\n\ttodoListId: number,\r\n\tcreatedAt?: string,\r\n\tupdatedAt?: string\r\n}\r\n\r\nexport type ToDoState = Map<number, ToDo[]>;\r\n\r\nexport type AppState = {\r\n\ttoDos: ToDoState\r\n}\r\n\r\nexport type LoadToDosAction = {\r\n\ttype: 'loadToDos',\r\n\tpayload: ToDo[]\r\n}\r\n\r\nexport type AddToDoAction = {\r\n\ttype: 'addToDo',\r\n\tpayload: ToDo\r\n}\r\n\r\nexport type DeleteToDoAction = {\r\n\ttype: 'deleteToDo',\r\n\tpayload: {\r\n\t\tid: ToDoId,\r\n\t\ttaskDateComplete: ToDoDateComplete\r\n\t}\r\n}\r\n\r\ntype Action = LoadToDosAction | DeleteToDoAction | AddToDoAction;\r\n\r\nconst initialState: AppState = {\r\n\ttoDos: new Map()\r\n}\r\n\r\n\r\nconst reducer = (state: AppState = initialState, action: Action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"loadToDos\":\r\n\t\t\tconst dataMap = new Map(state.toDos);\r\n\r\n\t\t\tfor (const item of action!.payload) {\r\n\t\t\t\tconst date:ToDoDateComplete = item!.dateComplete;\r\n\r\n\t\t\t\tif(dataMap.has(date)) {\r\n\t\t\t\t\tconst existingToDos = dataMap.get(date)!;\r\n\t\t\t\t\tdataMap.set(date, [...existingToDos ,item]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdataMap.set(date, [item]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoDos: dataMap\r\n\t\t\t};\r\n\t\tcase \"addToDo\": {\r\n\t\t\tconst date = action.payload.dateComplete;\r\n\t\t\tconst dataMap = new Map(state.toDos)\r\n\t\t\tif (dataMap.has(date)) {\r\n\t\t\t\tconst existingToDos = dataMap.get(date)!;\r\n\t\t\t\tdataMap.set(date, [...existingToDos, action.payload])\r\n\t\t\t} else {\r\n\t\t\t\tdataMap.set(date, [action.payload]);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoDos: dataMap\r\n\t\t\t}\r\n\t\t};\r\n\t\tcase \"deleteToDo\": {\r\n\t\t\tconst dataMap = new Map(state.toDos)\r\n\t\t\tconst tasks = dataMap.get(action.payload)\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoDos: dataMap\r\n\t\t\t}\r\n\t\t};\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const store = configureStore({\r\n\treducer: reducer,\r\n})"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AA4CjD,MAAMC,YAAsB,GAAG;EAC9BC,KAAK,EAAE,IAAIC,GAAG,CAAC;AAChB,CAAC;AAGD,MAAMC,OAAO,GAAGA,CAACC,KAAe,GAAGJ,YAAY,EAAEK,MAAc,KAAK;EACnE,QAAQA,MAAM,CAACC,IAAI;IAClB,KAAK,WAAW;MACf,MAAMC,OAAO,GAAG,IAAIL,GAAG,CAACE,KAAK,CAACH,KAAK,CAAC;MAEpC,KAAK,MAAMO,IAAI,IAAIH,MAAM,CAAEI,OAAO,EAAE;QACnC,MAAMC,IAAqB,GAAGF,IAAI,CAAEG,YAAY;QAEhD,IAAGJ,OAAO,CAACK,GAAG,CAACF,IAAI,CAAC,EAAE;UACrB,MAAMG,aAAa,GAAGN,OAAO,CAACO,GAAG,CAACJ,IAAI,CAAE;UACxCH,OAAO,CAACQ,GAAG,CAACL,IAAI,EAAE,CAAC,GAAGG,aAAa,EAAEL,IAAI,CAAC,CAAC;QAC5C,CAAC,MAAM;UACND,OAAO,CAACQ,GAAG,CAACL,IAAI,EAAE,CAACF,IAAI,CAAC,CAAC;QAC1B;MACD;MACA,OAAO;QACN,GAAGJ,KAAK;QACRH,KAAK,EAAEM;MACR,CAAC;IACF,KAAK,SAAS;MAAE;QACf,MAAMG,IAAI,GAAGL,MAAM,CAACI,OAAO,CAACE,YAAY;QACxC,MAAMJ,OAAO,GAAG,IAAIL,GAAG,CAACE,KAAK,CAACH,KAAK,CAAC;QACpC,IAAIM,OAAO,CAACK,GAAG,CAACF,IAAI,CAAC,EAAE;UACtB,MAAMG,aAAa,GAAGN,OAAO,CAACO,GAAG,CAACJ,IAAI,CAAE;UACxCH,OAAO,CAACQ,GAAG,CAACL,IAAI,EAAE,CAAC,GAAGG,aAAa,EAAER,MAAM,CAACI,OAAO,CAAC,CAAC;QACtD,CAAC,MAAM;UACNF,OAAO,CAACQ,GAAG,CAACL,IAAI,EAAE,CAACL,MAAM,CAACI,OAAO,CAAC,CAAC;QACpC;QACA,OAAO;UACN,GAAGL,KAAK;UACRH,KAAK,EAAEM;QACR,CAAC;MACF;MAAC;IACD,KAAK,YAAY;MAAE;QAClB,MAAMA,OAAO,GAAG,IAAIL,GAAG,CAACE,KAAK,CAACH,KAAK,CAAC;QACpC,MAAMe,KAAK,GAAGT,OAAO,CAACO,GAAG,CAACT,MAAM,CAACI,OAAO,CAAC;QACzC,OAAO;UACN,GAAGL,KAAK;UACRH,KAAK,EAAEM;QACR,CAAC;MACF;MAAC;IACD;MACC,OAAOH,KAAK;EACd;AACD,CAAC;AAED,OAAO,MAAMa,KAAK,GAAGlB,cAAc,CAAC;EACnCI,OAAO,EAAEA;AACV,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}